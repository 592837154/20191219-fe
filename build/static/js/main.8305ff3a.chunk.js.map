{"version":3,"sources":["pages/Home.tsx","pages/Detail.tsx","pages/router.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Home","goDetail","props","history","push","pathname","state","a","console","log","this","onClick","React","Component","location","BasicRoute","exact","path","component","Detail","App","useState","data","setData","useEffect","length","message","success","className","src","logo","alt","fetch","then","res","json","constent","catch","err","method","body","JSON","stringify","headers","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"uSAMqBA,E,2MAKVC,SAAW,WACd,EAAKC,MAAMC,QAAQC,KAAK,CACpBC,SAAU,UACVC,MAAO,CACHC,EAAG,M,mFAPXC,QAAQC,IAAIC,KAAKR,S,+BAYjB,OACI,6BACI,uBAAGS,QAASD,KAAKT,UAAjB,c,GAhBkBW,IAAMC,WCDnBb,E,iLAIb,OAFAQ,QAAQC,IAAIC,KAAKR,MAAMY,SAASR,OAG5B,6BACI,0C,GANkBM,IAAMC,WCUzBE,EATI,kBACf,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,UAAUC,UAAWC,OC0DpCC,G,OA9DO,WAAO,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,KA8C1B,OARAC,qBAAU,WACJF,EAAKG,QACPC,EAAA,EAAQC,QAAQL,KAEjB,CAACA,IACJE,qBAAU,WACRE,EAAA,EAAQC,QAAQ,0CACf,IAED,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,0DAGA,yBAAKH,UAAU,WACb,uBAAQjB,QApDA,WACdY,EAAQ,IAIRS,MACE,cAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,YAAe,IAAZX,EAAW,EAAXA,KACPd,QAAQC,IAAIa,GAEZC,EAAQD,EAAKc,aACZC,OAAM,SAACC,GACR9B,QAAQC,IAAI6B,QAsCV,OACA,uBAAQ3B,QApCC,WACfY,EAAQ,IACRS,MAAM,aAAc,CAClBO,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAEnBnC,EAAG,qBAELoC,QAAS,CACP,OAAU,mBACV,eAAgB,sBAEjBV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAM,SAACC,GAChC1B,QAAQC,IAAIyB,GACZX,EAAQW,EAAI3B,MACV8B,OAAM,SAAAC,GACR9B,QAAQC,IAAI6B,QAoBR,SAEF,kBAAC,EAAD,UCnDYM,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB,mBE7InBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.8305ff3a.chunk.js","sourcesContent":["import React from 'react';\nimport {HashRouter, Route, Switch } from 'react-router-dom';\n// const aa =useHistory()\ninterface IProps {\n    history: any\n}\nexport default class Home extends React.Component<IProps, any> {\n    public componentDidMount() {\n        console.log(this.props);\n\n    }\n    public goDetail = () => {\n        this.props.history.push({\n            pathname: '/detail',\n            state: {\n                a: 1\n            }\n        } )\n    }\n    render() {\n        return (\n            <div>\n                <a onClick={this.goDetail}> home</a>\n            </div>\n        )\n    }\n}","import React from 'react';\n\ninterface IProps{\n    location: any\n}\nexport default class Home extends React.Component<IProps,any> {\n    render() {\n        console.log(this.props.location.state);\n        \n        return (\n            <div>\n                <a>detail</a>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {HashRouter, Route, Switch,useHistory } from 'react-router-dom';\nimport Home from './Home';\nimport Detail from './Detail';\n\n\nconst BasicRoute = () => (\n    <HashRouter  > \n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/detail\" component={Detail}/>\n        </Switch>\n    </HashRouter>\n);\n\nexport default BasicRoute;","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport { message, Button } from 'antd';\nimport Router from './pages/router';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [data, setData] = useState('');\n  const getData = () => {\n    setData('')\n    // fetch('http://localhost:2019/api/first').then((aaa)=> {\n    //   console.log(aaa);\n    // })\n    fetch(\n      '/api/first'\n    )\n      .then((res) => res.json())\n      .then(({ data }) => {\n        console.log(data);\n        \n        setData(data.constent);\n      }).catch((err) => {\n        console.log(err);\n      })\n  }\n  const postData = () => {\n    setData('');\n    fetch('/api/first', {\n      method: 'POST',\n      body: JSON.stringify({\n        // 你想要发送到后台的数据，以对象形式发送\n        a: 'post成功',\n    }),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(((res) => {\n      console.log(res);\n      setData(res.a);\n    })).catch(err => {\n      console.log(err);\n    })\n  }\n  useEffect(() => {\n    if (data.length) {\n      message.success(data);\n    }\n  }, [data])\n  useEffect(() => {\n    message.success('create-react-app + typescript + antd');\n  }, [])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          前端111页面\n        </p>\n        <div className=\"buttons\">\n          <Button onClick={getData}>get</Button>\n          <Button onClick={postData}>post</Button>\n        </div>\n        <Router/>\n      </header>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}